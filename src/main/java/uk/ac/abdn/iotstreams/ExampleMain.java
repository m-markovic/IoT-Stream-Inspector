package uk.ac.abdn.iotstreams;

import java.io.ByteArrayInputStream;
import java.time.ZonedDateTime;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;

import uk.ac.abdn.iotstreams.csparql.IotStreamsEngine;
import eu.larkc.csparql.common.config.Config;

/**
 * @author nhc
 *
 * Examples of how to use this project.
 * Note that the file "csparql.properties" in the project root
 * has a setting that determines whether live data streams
 * will be used. See README.md for details.
 */
public final class ExampleMain {
    /**
     * Main method with examples of how to use this project.
     * @param args not used
     */
    public static void main(final String[] args) {
        //Check csparql.properties to determine whether live or recorded data will be used
        if (useRecordedData()) {
            recordedDataExample();
        } else {// Live data stream
            //TODO
        }
    }
    
    private static void recordedDataExample() {
        System.out.println("BEGIN recorded data example");
        //All data generated by SPARQL updates will be dumped as N3 on System.out
        final IotStreamsEngine engine = IotStreamsEngine.forRecordedData(m -> m.write(System.out, "N3"));
        //Add first input
        final ZonedDateTime firstTimestamp = ZonedDateTime.parse("2007-12-03T10:15:30+01:00[Europe/Paris]");
        final Model firstInput = parseN3("<http://example> <http://answer> 42");
        engine.apply(firstTimestamp).accept(firstInput);
        //Add second input
        final ZonedDateTime secondTimestamp = ZonedDateTime.parse("2017-01-01T12:34:56+01:00[Europe/Paris]");
        final Model secondInput = parseN3("<http://other> <http://example> <http://triple>");
        engine.apply(secondTimestamp).accept(secondInput);
        //That's it - but you may have to wait 20-30 seconds before C-SPARQL finishes its business
        engine.log();
        System.out.println("END recorded data example");
        System.exit(0);
    }
    
    /**
     * Utility method for parsing N3 strings into Jena Models
     * @param n3 E.g. "<http://a> <http:/b> 0"
     * @return A model with the triples from n3
     */
    private static Model parseN3(final String n3) {
        final Model m = ModelFactory.createDefaultModel();
        m.read(new ByteArrayInputStream(n3.getBytes()), null, "N3");
        return m;
    }

    /**
     * Reflects the esper.externaltime.enabled setting in csparql.properties
     * @return true if C-SPARQL will make windows based on timestamps
     * in the data, false if C-SPARQL will make windows based on the
     * system's current time when data was put on the stream.
     */
    private static boolean useRecordedData() {
        return Config.INSTANCE.isEsperUsingExternalTimestamp();
    }
    
}
